#!/bin/bash
# INFINITY JobType loop
# INFINITY start   1
# INFINITY stop    5
# INFINITY format  mc%03d
# INFINITY afix    .state
# INFINITY archive storage

NSWEEPS=100

function getOptions {
SWEEP=`printf "%-12d" ${1}`
SEED=`printf "%-16d" ${RANDOM}`

#${SEED}
#${SWEEP}

# frequent restarting with the same seed causes improper sampling
cat << EOF > options
ptype = 2               #  Pressure coupling type (0-anisotropic xyz, 1-isotropic xyz, 2 - isotropic in xy z=const, 3 - isotropic in xy and V=const)
press = 0.0             #  Pressure
paralpress = 0          #  Parallel pressure for replica exchange
shave = 1               #  Average number of volume change attempts per sweep (usually 1)
nequil = 0              #  Number of equilibration sweeps
adjust = 0              #  Number of equilibration sweeps between step size adjustments
nsweeps  = ${SWEEP}      #  Number of production sweeps
paramfrq = 100000       #  Number of sweeps between order parameter samples
report   = 100         #  Number of sweeps between statistics reports
nrepchange = 0          #  Number of sweeps between replica exchanges
nGrandCanon = 0
nClustMove = 0
movie    = 1            #  Number of sweeps between movie frames (0 = no movie)
chainprob = 0.1         #  Probability of chain move attempts per sweep (0.25/number of particles in chain)
transmx = 0.05           #  Initial maximum displacement, Default value for all types
transmx_type = 3 0.5 # Type specific displacement, transmx_type = type displacement type displacement ...
rotmx = 10.0             #  Initial maximum orientation change (degrees)
edge_mx = 0.1           #  Initial maximum box length change
chainmmx = 0.05          #  Initial maximum chain displacement
chainrmx = 7.0          #  Initial maximum chain rotation change (degrees)
temper = 1.0            #  Temperature in units kT/e
paraltemper = 1.0       #  Temperature for parallel tempering in kT/e 
wlm = 1 3               #  Wang-Landau method
wlmtype = 3             #  For which atomic type (from top.init) should the Wang-Landau method be calculated?
switchprob = 0.00       #  Probability of type switch attempts per sweep
pairlist_update = 0     #  Number of sweeps after which the pairlist should be updated
seed = ${SEED}          #  Random number seed
write_cluster = 0       #  Number of sweeps per writing out cluster info
EOF
}



# archive runtime files from the previous stage
parchive runtime $INF_LOOP_START $INF_LOOP_CURRENT $INF_LOOP_FORMAT

# create STAGE strings
CURR="`printf $INF_LOOP_FORMAT $(($INF_LOOP_CURRENT))`"
NEXT="`printf $INF_LOOP_FORMAT $(($INF_LOOP_CURRENT+1))`"


#
# compile the SC program, quick
#
module add cmake
cd scOOP/
  rm -rf CMakeFiles/ CMakeCache.txt Makefile cmake_install.cmake
  if [ $INF_NCPU -eq 1 ]; then 
    cmake .
    make -j $INF_NCPU 
  else
    module add mpich
    cmake . -DENABLE_MPI=ON -DENABLE_OPENMP=OFF
    make -j $INF_NCPU 
  fi
cd ..
cp scOOP/SC .
if [ $? -ne 0 ]; then exit 2; fi  # exit if this fails

var=$INF_NCPU
let "var-=1"

#
# PREPARE RUN: get starting coordinates / options file
#
if [ $INF_LOOP_CURRENT -eq $INF_LOOP_START ]; then
    # test if this is a Wang-Landau run
    if [ -f wl.dat ]; then 
      WL="${CURR}.wl"
      cp wl.dat ${WL}
    else
      WL=""
    fi

    # archive init files
    cp config.init ${CURR}.init
    parchive move ${CURR}.init ${WL}
    if [ $? -ne 0 ]; then exit 1; fi  # exit if this fails

    # generate options file
    getOptions ${NSWEEPS}
else
    # test if this is a Wang-Landau run
    if [ -f wl.dat ]; then 
      WL="${CURR}.wl"
    else 
      WL=""
    fi

    if [ $INF_NCPU -eq 1 ]; then 
      # obtain init files
      parchive get ${CURR}.init ${WL}
      if [ $? -ne 0 ]; then exit 1; fi  # exit if this fails

      # rename input files
      mv ${CURR}.init config.init
      if [ -f ${CURR}.wl ]; then mv ${CURR}.wl wl.dat; fi
    else
      rm -f config.init
      parchive get ${WL}
      if [ $? -ne 0 ]; then exit 1; fi  # exit if this fails

      for i in `seq 0 1 $var`; do 
        parchive get ${i}${CURR}.init
        if [ $? -ne 0 ]; then exit 1; fi  # exit if this fails
        mv ${i}${CURR}.init ${i}config.init
      done
    fi

    # generate options file
    getOptions ${NSWEEPS}
fi



#
# PERFORM RUN
#
if [ $INF_NCPU -eq 1 ]; then 
  ./SC &> sc.log
  if [ $? -ne 0 ]; then exit 2; fi  # exit if this fails
else 
  mpirun -np $INF_NCPU ./SC &> sc.log
fi



#
# test Wang-Landau convergence
#
FIN=`awk 'BEGIN {a = 0} /F I N I S H E D/ {a = 1} END {print a}' < sc.log`
if [ ${FIN} -gt 0 ]; then exit 0; fi

#
# POST-RUN SAVE OF FILES: rename output files for archivation
#
if [ $INF_NCPU -eq 1 ]; then 
  mv config.last ${NEXT}.init
  mv energy.dat ${CURR}.engy
  mv movie ${CURR}.movie
  mv options ${CURR}.opts
  mv sc.log ${CURR}.log
  mv stat.dat ${CURR}.stat
  if [ -f wl-new.dat ]; then WL="${NEXT}.wl"; mv wl-new.dat ${WL}; else WL=""; fi
else 
  for i in `seq 0 1 $var`; do 
    mv ${i}config.last ${i}${NEXT}.init
    mv ${i}energy.dat ${i}${CURR}.engy
    mv ${i}movie ${i}${CURR}.movie
    mv ${i}stat.dat ${i}${CURR}.stat 
  done
  mv options ${CURR}.opts
  mv sc.log ${CURR}.log
  if [ -f wl-new.dat ]; then WL="${NEXT}.wl"; mv wl-new.dat ${WL}; else WL=""; fi
fi

touch ${NEXT}.state

#
# archive produced data and restart files for the next run
#
if [ $INF_NCPU -eq 1 ]; then 
  parchive move ${NEXT}.init ${CURR}.engy ${CURR}.movie ${CURR}.opts ${CURR}.log ${CURR}.stat ${WL} ${NEXT}.state
  if [ $? -ne 0 ]; then exit 1; fi  # exit if this fails
else
  for i in `seq 0 1 $var`; do 
    parchive move ${i}${NEXT}.init ${i}${CURR}.engy ${i}${CURR}.movie ${i}${CURR}.stat
    if [ $? -ne 0 ]; then exit 1; fi  # exit if this fails
  done
  parchive move ${CURR}.opts ${CURR}.log ${WL} ${NEXT}.state
  if [ $? -ne 0 ]; then exit 1; fi  # exit if this fails
fi

#
# clean already archived and other temporary data
#
if [ $INF_NCPU -eq 1 ]; then 
  rm -f ${CURR}.* ${NEXT}.* SC
else
  for i in `seq 0 1 $var`; do 
    rm -f ${i}${CURR}.* ${i}${NEXT}.*
  done
  rm -f ${CURR}.* ${NEXT}.* SC
fi

#
# resubmit job
#
presubmit
